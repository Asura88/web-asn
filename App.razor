@inject NavigationManager NavigationManager
@using System.Reflection
<div class="document-content">
    <div>
        <div id="errors">@Errors</div>
        <textarea id="contents" name="contents" @bind="Contents">
        </textarea>
        <button @onclick="Decode">Decode</button>
    </div>
    <div>
        <div class="asn-tree">
            <NodeTemplate Node="RootNode" />
        </div>
    </div>
</div>

<div id="footer">
    <div class="round-button" @onclick="()=> ShowHelp = true">
        <a>
            <span>?</span>
        </a>
    </div>
</div>

@if (ShowHelp) {
    <div id="help" @onclick="()=> ShowHelp = false">
        <div id="help-container" @onclick:stopPropagation="true">
            <span id="close-help" class="round-button" @onclick="()=> ShowHelp = false">
                <a>
                    <span>&times;</span>
                </a>
            </span>
            <div id="help-content">
                <h1>Basics</h1>
                <p>
                    This is a simple web assembly application that takes ASN.1 encoded content and displays the content
                    as a tree. The content can be a string of hex-encoded bytes, or base-64. PEM encoded base-64 will work,
                    too. The ASN.1 content supports BER, and by extension CER and DER.
                </p>
                <p>
                    Because the decoding is all happening in your browser, none of the content is sent to the server.
                </p>
                <h1>Display</h1>
                <p>
                    Each node in the tree represents an item in the ASN.1 content. Deeper nesting of the content indicates
                    sub-items, such as those contained in a SEQUENCE.
                </p>
                <ul>
                    <li><span class="node-standard">Standard</span> indicates a regular node in the tree.</li>
                    <li>
                        <span class="node-synthetic">Synthethic</span> indicates the node was sythetically decoded. This occurs
                        when the ASN.1 item does not exist as a true item, but rather as ASN.1 encoded data in an OCTET STRING
                        or BIT STRING. If inner content of either of those two kinds of nodes appears to be well-formed ASN.1,
                        its contents will be decoded and shown as synthetic nodes.
                    </li>
                    <li>Node names surrounded by square brackets, like [0] represent a content-specific ASN.1 tag.</li>
                    <li>Node names surrounded by curly braces, like {0} represent an application ASN.1 tag.</li>
                </ul>

                <h1>About</h1>
                <p>
                    @System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription
                    @(typeof(App).Assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion)
                </p>
                <p><a href="https://github.com/vcsjones/web-asn" target="_blank">GitHub</a></p>
            </div>
        </div>
    </div>
}

@code {
    private string Contents { get; set; } = @"0C0C48656C6C6F20576F726C6421";
    private AsnNode? RootNode { get; set; }
    private string? Errors { get; set; }
    private bool ShowHelp { get; set; }

    protected override void OnInitialized() {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (uri.Query.StartsWith("?asn=", StringComparison.Ordinal)) {
            Contents = uri.Query.Substring(5);
            Decode();
        }
        else if (uri.Fragment.Length > 1 && uri.Fragment[0] == '#') {
            Contents = uri.Fragment.Substring(1);
            Decode();
        }
    }

    private void Decode() {
        Errors = null;
        byte[]? decoded = null;

        try {
            string cleaned = Contents.Replace(" ", "").ReplaceLineEndings("");
            decoded = Convert.FromHexString(cleaned);
        }
        catch {
        }

        if (decoded is null) {
            try {
                decoded = Convert.FromBase64String(Contents);
            }
            catch {
            }
        }

        if (decoded is null) {
            if (PemEncoding.TryFind(Contents, out PemFields fields)) {
                decoded = Convert.FromBase64String(Contents[fields.Base64Data]);
            }
        }

        if (decoded is null) {
            Errors = "Content could not be decoded as hex or base64.";
            RootNode = null;
            return;
        }

        try {
            AsnWalkContext context = new(decoded);
            AsnWalker walker = new(context, decoded);
            AsnNode node = walker.Walk().First();
            RootNode = node;
        }
        catch (Exception e) {
            RootNode = null;
            Errors = e.Message;
        }
    }
}
